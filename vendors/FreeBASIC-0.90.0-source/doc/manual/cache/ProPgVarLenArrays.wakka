{{fbdoc item="title" value="Variable-length Arrays"}}----
Resizable homogeneous data structures.

{{fbdoc item="section" value="Overview"}}
	Variable-length arrays are [[ProPgArrays arrays]] that can, during program execution, either be resized to hold more or less elements, or have their dimension[s] use a different subscript range. The memory used by a variable-length array to store its elements is allocated at runtime, in the free store (the heap), as opposed to fixed-length arrays whose data is either allocated on the program stack or in the ##.BSS## or ##.DATA## sections of the executable, depending on whether they were defined with ##[[KeyPgStatic Static]]##.

{{fbdoc item="section" value="Declaration and definition"}}
	A variable-length array is declared with the ##[[KeyPgExtern Extern]]## keyword, followed by a variable identifier, a parenthesized list of zero (0) or more subscript ranges and an element [[CatPgStdDataTypes datatype]]. For an array to be declared variable-length, either an empty subscript range list can be used, or one or more of the subscript ranges must have non-constant values - that is, the ranges must be specified by variables or objects convertible to ##[[KeyPgInteger Integer]]##.

{{fbdoc item="filename" value="examples/manual/proguide/arrays/varlen_1.bas"}}%%(freebasic)
dim maxLowerBound as integer = -5
dim maxUpperBound as integer = 10

'' Declares a two dimensional variable-length array of elements of type STRING..
extern arrayOfStrings(maxLowerBound to maxUpperBound, 20) as string

'' Declares a one-dimensional variable-length array of elements of type BYTE..
extern arrayOfBytes() as byte
%%
	A variable-length array is defined with either the ##[[KeyPgDim Dim]]## or ##[[KeyPgRedim Redim]]## keywords, following the same form as declaration. The ##[[KeyPgRedim Redim]]## keyword always defines variable-length arrays, whether the subscript ranges are constant or not. Variable-length arrays cannot be defined with static storage using ##[[KeyPgStatic Static]]##.

{{fbdoc item="filename" value="examples/manual/proguide/arrays/varlen_2.bas"}}%%(freebasic)
'' Defines one-dimensional variable-length arrays of type SHORT and INTEGER..
dim arrayOfShorts() as short
redim arrayOfIntegers(9) as integer
%%
	Since the memory for variable-length arrays is allocated at runtime, when they are defined, the elements of variable-length arrays declared with ##[[KeyPgExtern EXTERN]]## cannot be accessed until the array is defined. Similarly, variable-length arrays defined with empty subscript range lists have zero size - they hold zero elements - so they too must be resized before any elements can be accessed.

{{fbdoc item="section" value="Resizing"}}
	Resizing a variable-length array refers to "redefining" the array with different values for its subscript range[s], allowing the array to grow or shrink. Elements outside the new subscript range[s] are erased; object elements will be destroyed. If the array is resized to a larger size, new elements are added initialized with a zero or //null// value; object elements are default-constructed. Variable-length arrays are resized using the ##[[KeyPgRedim Redim]]## keyword following the same form as definition.

{{fbdoc item="filename" value="examples/manual/proguide/arrays/varlen_3.bas"}}%%(freebasic)
'' Define an empty variable-length array of SINGLE elements..
dim array() as single

'' Resize the array to hold ten (10) SINGLE elements..
redim array(9) as single
%%
	By default, element values of a variable-length array are lost when resized - the array will contain zero or more elements initialized to a zero or //null// value, or if the elements are objects, they will be default-constructed. To retain the previous element values during a resize, use the ##[[KeyPgPreserve Preserve]]## keyword.

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}