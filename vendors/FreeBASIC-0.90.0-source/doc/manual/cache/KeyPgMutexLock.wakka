{{fbdoc item="title" value="MUTEXLOCK"}}----
Acquires a mutex

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgSub sub]] **Mutexlock** ( [[KeyPgByval byval]] //id// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
##
{{fbdoc item="usage"}}##
	**Mutexlock**( //id// )
##
{{fbdoc item="param"}}
	##//id//##
		The ##[[KeyPgAny any]] [[KeyPgPtr ptr]]## handle of the mutex to be locked.

{{fbdoc item="desc"}}
	##Mutexlock## halts any other threads using a mutex "handle", generated by ##[[KeyPgMutexCreate Mutexcreate]]##, until the handle is unlocked with ##[[KeyPgMutexUnlock Mutexunlock]]##.

	See ##[[KeyPgMutexCreate Mutexcreate]]## for more general information on mutexes.

{{fbdoc item="ex"}}
	See the ##[[KeyPgThreadCreate Threadcreate]]## examples.

{{fbdoc item="lang"}}
	- Threading is not allowed in the //[[CompilerOptlang -lang qb]]// dialect.

{{fbdoc item="target"}}
	- The DOS version of ""FreeBASIC"" does not allow for threads, as the OS does not support them.
	- In Linux the threads are always started in the order they are created, this can't be assumed in ""Win32"". It's an OS, not a ""FreeBASIC"" issue. 

{{fbdoc item="diff"}}
	- New to ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgMutexCreate Mutexcreate]]##
	- ##[[KeyPgMutexDestroy Mutexdestroy]]##
	- ##[[KeyPgMutexUnlock Mutexunlock]]##
	- ##[[KeyPgThreadCreate Threadcreate]]##
	- ##[[KeyPgThreadWait Threadwait]]##

{{fbdoc item="back" value="CatPgThreading|Threading Support Functions"}}